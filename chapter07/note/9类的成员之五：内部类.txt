1. 什么是内部类？
    将一个类A定义在另一个类B里面，里面的那个类A就称为内部类

2. 为什么需要内部类？
    总的来说，遵循”高内聚，低耦合“的面向对象开发原则

3. 内部类举例？
    Thread类内部声明了state类，表示线程的生命周期
    HashMap类中声明了Node类，表示封装的key和value

4. 内部类的分类：（参考变量的分类）
    > 成员内部类：直接声明在外部类的里面
        >使用static修饰的，静态成员内部类  Person.Cat cat = new Person.Cat();
                                   (类里面的类对象直接声明静态类)
        >不使用static修饰的，非静态成员内部类  cPerson p1 = new Person();   p1.Cat cat = p1.new.Cat();
                                          (先声明对象才能调用非静态内部类)   (对象调用类再声明)
    > 局部内部类：声明在方法内、构造器内、代码块内的内部类
        >匿名的局部内部类
        >非匿名的局部内部类

5. 内部类知识点：
    >成员内部类的理解： 类中的类
    >如何创建成员内部类的实例：（见4，分静态和非静态声明）
    >如何在成员内部类中调用外部类的结构
        内部类与外部类变量不重名：直接调用，(外部)name = name; 等同于 Person.this.name = name;

        内部类与外部类变量重名：
            内部内调用内部变量：(内部)age = age; 或  this.age = age;
            内部类调用外部变量： Person.this.age = age;

        内部类调用外部类的方法也相同：内部类：this.eat(); 或 eat();   外部类：Person.this.eat();

    >局部内部类的基本使用: 同接口的匿名使用相同  USB usb = new USB{
                                                    // 重写接口中的方法
                                                   }

6. 关于成员内部类的理解：
    >从类的角度看：
        - 内部可以声明属性、方法、构造器、代码块、内部类等结构
        - 此内部类可以声明父类，可以实现接口
        - 可以使用final修饰
        - 可以使用abstract修饰

    >从外部类的成员的角度看：
        - 在内部可以调用外部类的结构。比如：属性、方法等
        - 除了使用public、缺省权限修饰之外，还可以用private、protected修饰
        - 可以使用static修饰


不管是抽象类还是接口，实现或者继承的时候都需要对内部的抽象方法进行重写，此时可以直接 new抽象类或者接口再
进行方法的重写，然后作为对象的多态传入
例:
new A(){

    // 重写方法
}.方法名();


案例2：
class B{

}

B b = new B(){}   // 这种写法相当于一个匿名类继承了类B，{}中为空相当于没有重写类B中的方法，调用方法时默认调用
                     父类中的方法，也可以在{}中对类B中的方法进行重写