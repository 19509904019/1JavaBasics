1. 案例引入

abstract class GeometricObject{ // 集合图形

        // 求面积（只能考虑提供方法的声明，而没有办法提供方法体。所以，此方法适合声明为抽象方法）

        // 求周长（只能考虑提供方法的声明，而没有办法提供方法体。所以，此方法适合声明为抽象方法）

}

class Circle extends GeometricObject{
    // 求面积（必须重写父类中的抽象方法）

    // 求周长（必须重写父类中的抽象方法）
}

class Rectangle extends GeometricObject {
    // 求面积（必须重写父类中的抽象方法）

    // 求周长（必须重写父类中的抽象方法）
}


2.abstract可以用来修饰类、方法

3.具体使用：
    3.1 abstract修饰类：
        > 此类为抽象类
        > 抽象类不能实例化
        > 抽象类中是包含构造器的，因为子类对象实例化时，需要直接或间接的调用到父类的构造器
        > 抽象类中可以没有抽象方法，但是抽象方法一定实在抽象类中

    3.2 abstract修饰方法：
        > 此方法即为抽象方法
        > 抽象方法只有方法的声明，没有方法体
        > 抽象方法其功能是确定的（通过方法的声明即可确定），只是不知道如何具体实现（体现为没有方法体）
        > 子类必须重写父类中的所有的抽象方法之后，方可实例化。否则此子类仍然是一个抽象类

4. abstract不能使用的场景：
    4.1 abstract不能修饰哪些结构？
        属性、构造器、代码块等

    4.2 abstract不能跟哪些关键字使用？
        不能用abstract修饰私有方法、静态方法、final的方法、final类
        > 私有方法不能重写
        > 避免静态方法使用类进行调用
        > final的方法不能被重写
        > final修饰的类不能有子类











