1. 继承性的理解
    >生活上：财产的继承
    >代码层面：
        ① 自上而下：定义了一个类A，在定义另一个类B时，发现类B的功能与类A相似，考虑类B继承类A
        ② 自下而上：定义了类B、C、D等，发现B、C、D有类似的属性和方法，则可以考虑将相同的属性和
                   方法进行抽取，封装到类A中，让类B、C、D继承于类A，同时，B、C、D中的相似功能
                   就可以删除了。

2. 继承的好处
    ①继承的出现减少了代码冗余，提高了代码的复用性
    ②继承的出现更有利于功能的扩展
    ③继承的出现让类与类之间产生了"is-a"的关系，为多态的使用提供了前提
    ④继承描述事物之间的所属关系，这种关系是"is-a"的关系。可见父类更通用、更一般，子类更具体。

3. 继承的格式

    class A{
        // 属性、方法
    }

    class B extends A{

    }

    类A：父类、superClass、超类、基类
    类B：子类、subClass、派生类

4.继承的作用
    > 子类获取了父类中声明的所有的属性和方法
    > 但是由于封装性的影响，可能子类不能直接调用父类中声明的属性和方法
    > 子类在继承父类以后，还可以扩展自己特有的功能（增加特有的属性、方法）
    > 不要为了继承而继承，继承之前考虑是否有"is-a"的关系

5.默认的父类
    Java中声明的类，如果没有显式的声明其父类时，则默认继承于java.lang.Object

6.补充说明
    > Java支持多层继承，不支持多重继承
        即有直接父类、间接父类
    > Java中一个父类可以声明多个子类，反之一个子类只能有一个父类(Java的单继承性)
