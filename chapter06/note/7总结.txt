1. this关键字的使用
    ① this调用的结构：属性、方法；构造器
    ② this调用属性或方法时，理解为：当前对象或当前正在创建的对象
        当属性名和形参名同名时，必须使用this来区分
    ③ this(形参列表)的方式，表示调用当前类中其他的重载的构造器

2.面向对象的特征二：继承性
    (1) 继承性的好处
        ① 减少了代码的冗余，提高了复用性
        ② 提高了扩展性
        ③ 为多态的使用提供了前提

    (2) Java中继承性的特点
        ① 局限性：类的单继承性。后续通过类实现接口的方式解决单继承的局限性
        ② 支持多层继承，一个父类可以有多个子类

    (3) 基础：class A extends B{}
        理解：子类获取父类中声明的全部属性、方法。可能受封装性的影响不能直接调用

3.方法的重写
    方法的重载与重写的区别？
        方法的重载："两同一不同"
        方法的重写：
            前提：类的继承关系
            子类对父类中同名参数方法的覆盖、覆写

4.super关键字的使用
    ① super可以调用属性、方法；构造器

    ② super:父类的

    ③ super调用属性、方法：
        Ⅰ.如果子父类中使用了同名的属性，此时使用super.的方式，表明调用的是父类中声明的属性
        Ⅱ.子类重写了父类的方法。如果子类的任何一个方法需要调用父类被重写的方法时，需要使用super.

    ④ super调用构造器：
        在子类的构造器中，首行要么使用了"this(形参列表)",要么使用了"super(形参列表)",默认调用"super()"

5.（熟悉）子类对象实例化的全过程
    结果上来说：体现为继承性
    从过程上来说：子类调用构造器创建对象时，一定会直接或间接的调用其父类的构造器，以及父类的父类的构造器
                ...., 直到调用到object()的构造器。

6.面向对象的特征三：多态性
    ① 广义上的理解
        子类对象的多态性、方法的重写；方法的重载
      狭义上的理解
        子类对象的多态性

    （自我理解：就是父类可以被多个子类继承，当在实际运用过程中不知道使用哪一个子类，这时候就可以将父类传入形参列表，
        实际运用的时候可以传入子类，使用各自重写的方法，在使用特有方法的使用需要向下转型，向下转型时需要用instanceOf进行判断）

    ②格式：Object obj = new String("hello"); 父类的引用指向子类的对象

    ③ 多态的好处：减少了大量的重载的方法的定义；开闭原则
                public boolean equals(Object obj){}

    ④ 多态的使用：虚拟方法调用。”编译看左边，运行看右边“。属性不存在多态性

    ⑤多态的逆过程：向下转型，使用强转符()
        为了避免出现强转时的ClassCastException,建议()之前使用instanceOf()进行判断

7.Object类的使用
    根父类：
        equals()的使用
            ①重写与不重写的区别
            ②==和equals()的区别

        toString()的使用
            ① Object中toString()调用后，返回当前对象所属的类和地址值
            ② 开发中常常重写toString(),用于返回当前对象的属性信息

8.项目二：拼电商客户管理系统
    编写两个类：Customer、CustomerList(封装了对数组的增删改查操作)

















