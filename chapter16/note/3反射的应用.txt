1. 反射的应用1：创建运行时类的对象
    1.1 如何实现？
        通过Class的实例调用newInstance()方法即可

    1.2 要想创建成功，需要满足什么条件？
        条件1：要求运行时类中必须提供一个空参构造器
        条件2：要求提供的空参构造器的权限要足够

    1.3回忆：JavaBean中要求给当前类提供一个公共的空参构造器，有什么用？
        > 场景1：子类对象在实例化时，子类的构造器的首行默认调用父类空参的构造器
        > 场景2：在反射中，经常用来创建运行时类的对象，那么要求各个运行时类都提供一空参
                构造器，便于编写创建运行时类对象的代码

    1.4 在jdk9中标识为过时，替换成什么结构
        通过Constructor类调用newInstance(...)


2. 反射的应用2：获取运行时类的内部结构
    2.1 （了解）获取运行时类的内部结构1：所有属性、所有方法、所有构造器
    2.2 （熟悉）获取运行时类的内部结构2：父类、接口们、包、带泛型的父类、父类的泛型等


3. （掌握）反射的应用3：调用指定的结构：指定的属性、方法、构造器
    指定属性：
        步骤1:通过Class实例调用getDeclaredField(String fieldName),获取运行时类指定名的属性
        步骤2：setAccessible(true):确保此属性是可以访问的
        步骤3：通过Field类的实例调用get(Object obj) 或 set(Object obj, Object value)进行操作

    指定方法：
        步骤1:通过Class实例调用getDeclaredMethod(String methodName, Class ... args),获取运行时类指定名的方法
        步骤2：setAccessible(true):确保此方法是可以访问的
        步骤3：通过Method类的实例调用invoke(Object obj, ... args)进行操作
            invoke()的返回值即为Method对应的方法的返回值
            特别的：如果Method对应的方法的返回值类型为void，则invoke()返回值为null

    指定构造器：
        步骤1.通过Class的实例调用getDeclaredConstructor(Class .. args),获取指定参数类型的构造器
        步骤2.setAccessible(true):确保此构造器是可以访问的
        步骤3.通过constructor实例调用newInstance(Object ... objs)，返回一个运行时类的实例

4. 反射的应用4：通过反射获取注解的信息
    4.1 自定义注解
        @Retention(RetentionPolicy.RUNTIME)
        @Target(ElementType.METHOD)
        @interface CustomAnnotation {
            String value();
            int priority() default 0;
        }
        注解要想通过反射的方式获取，必须声明元注解：@Retention(RetentionPolicy.RUNTIME)


