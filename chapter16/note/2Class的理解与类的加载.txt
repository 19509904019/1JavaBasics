1. Class类的理解（掌握）
    （如下一Java类的加载为例说明）
    针对于编写好的.java源文件进行编译（使用javac.exe），会生成一个或多个.class字节码文件。接着，我们使
    java.exe命令对指定的.class文件进行解释运行。这个解释运行的过程中，我们需要将.class字节码文件加载到
    内存中（类的加载器加载到方法区）。加载到内存中的.class文件对应的结构即为Class的一个实例。

    比如：加载到内存中的Person类或String类或User类，都作为Class的一个一个实例

        Class clazz1 = Person.class;
        Class clazz2 = String.class;
        Class clazz3 = User.class;
        Class clazz4 = Comparable.class;

    说明：运行时类在内部中会缓存起来，在整个执行期间，只会加载一次

2. 体会：Class看作是反射的源头

3. 获取Class实例的几种方式（掌握前三种）
    ①   Class<Person> clazz1 = Person.class;

    ②   Person p1 = new Person();
         Class<? extends Person> clazz2 = p1.getClass();

    ③   String className = "com._class.Person"; // 全类名
         Class<?> clazz3 = Class.forName(className);

    ④ Class<?> clazz4 = ClassLoader.getSystemClassLoader()
                                        .loadClass("com._class.Person");

4.Class的实例都可以指向哪些结构呢？（熟悉）
    Object.class;   Comparable.class;   String[].class;
    int[][].class;  ElementType.class;  Override.class;
    int.class;  void.class;     Class.class;

5.类的加载过程（了解）
    过程1：类的装载(laoding):将类的字节码文件加载到内存中

    过程2：链接(Linking)
        > 验证(Verify):确保加载的类信息符合JVM规范，例如：以cafebabe开头，没有安全方面的问题
        > 准备(Prepare):为类的静态变量(static)分配内存空间，并设置默认初始值（零值）。这些静态
                        变量通常在方法区中进行分配
        > 解析(Resolve):虚拟机常量池内的符号引用（常量名）替换为直接引用（地址）的过程

    过程3：初始化(initialization)
        执行类的初始化代码，包括静态变量赋值和静态代码块的执行。
        类构造器<clinit>()方法是由编译器自动收集类中所有类变量的赋值动作和静态代码块中的语句合并产生的

6.关于类的加载器（了解）
    6.1 作用：负责类的加载，并对应于一个Class的实例

    6.2 分类：
        > BootstrapClassLoader:引导类加载器、启动类加载器

        > 继承于ClassLoader的类加载器
            > ExtensionClassLoader：扩展类加载器
            > SystemClassLoader / ApplicationClassLoader：系统类加载器、应用程序类加载器
            > 用户自定义类的加载器
                > 实现应用的隔离（同一个类在一个应用程序中可以加载多份）；
                > 数据的加密

    6.3 以上类的加载器不存在继承关系

7.（掌握）使用类的加载器获取流，并读取配置文件信息

Properties：处理属性文件,数据和代码的分离
    Properties properties = new properties();

    // 读取的文件默认路径为：当前module下
    FileInputStream fis = new FileInputStream(new File("123.txt"));

    properties.load(fis);

    String name = properties.getProperty("name");
    int age = Integer.parseInt(properties.getProperty("age"));
    System.out.println(name + ":" + age);



通过类的加载器读取的文件:
    Properties properties = new properties();

   // 通过类的加载器读取的文件的默认的路径为：当前module下的src下
   InputStream is = ClassLoader.getSystemClassLoader()
               .getResourceAsStream("info.properties");

    properties.load(fis);

    String name = properties.getProperty("name");
    int age = Integer.parseInt(properties.getProperty("age"));
    System.out.println(name + ":" + age);
















