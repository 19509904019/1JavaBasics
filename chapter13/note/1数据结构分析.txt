1.数据的存储结构
    > 线性表（一对一）：数组、单链表、双链表、栈、队列
    > 树（一对多）：二叉树、B+树
    > 图（多对多）
    > 哈希表：HashMap、HashSet

2.相关算法操作
    - 分配资源，建立结构，释放资源
    - 插入和删除
    - 获取和遍历
    - 修改和排序

3. 常见存储结构：数组

4. 常见存储结构：链表
    链表中的基本单位是:节点(Node)

    4.1 单向链表
        class Node{
            Object data;
            Node next;

            public Node(Object data){
                this.data = data;
            }
        }


        创建对象：
            Node node1 = new Node("AA");
            Node node1 = new Node("BB");
            node1.next = node2;


    4.2 双向链表
        class Node{
            Node prev;
            Object data;
            Node next;

        public Node(Object data){
            this.data = data;
        }

        public Node(Node prev, Object data, Node next){
            this.prev = prev;
            this.data = data;
            this.next = next;
            }
        }

        创建对象：
        Node node1 = new Node(null,"AA",null);
        Node node2 = new Node(node1,"BB",null);
        Node node3 = new Node(node2,"CC",null);

        node1.next = node2;
        node2.next = node3;

5.常见存储结构：二叉树
    class TreeNode{
        TreeNode left;
        Object data;
        TreeNode right;

        public TreeNode(Object data){
            this.data = data;
        }

        public TreeNode(TreeNode left, Object data, TreeNode right){
                    this.left = left;
                    this.data = data;
                    this.right = right;
            }
        }

        创建对象:
            TreeNode node1 = new TreeNode(null,"AA",null);
            TreeNode leftNode = new TreeNode(null,"BB",null)
            TreeNode rightNode = new TreeNode(null,"CC",null)

            node1.left = leftNode;
            node2.right = rightNode;

        或：
        class TreeNode{
            TreeNode parent;
            TreeNode left;
            Object data;
            TreeNode right;

            public TreeNode(Object data){
                this.data = data;
            }

            public TreeNode(TreeNode parent, TreeNode left,
                                Object data, TreeNode right){
                        this.parent = parent;
                        this.left = left;
                        this.data = data;
                        this.right = right;
                }
            }

        创建对象：
            TreeNode node1 = new TreeNode(null, null, "AA", null);
            TreeNode leftNode = new TreeNode(node1, null, "BB", null)
            TreeNode rightNode = new TreeNode(node1, null, "CC", null)

            node1.left = leftNode;
            node2.right = rightNode;

6. 常见存储结构：栈（stack、先进后出、first in last out、FILO）
    > 属于抽象数据类型（ADT）
    > 可以使用数组或链表来构建

    class Stack{
        Object[] values;
        int size;  // 记录存储的元素的个数

        public Stack(int length){
            values = new Object[length];
        }

        // 入栈
        public void push(Object ele){
            if(size >= values.length){
            throw new RuntimeException("栈空间已满，入栈失败！");
           }

            value[size++] = ele;
        }

        // 出栈
        public Object pop(Object ele){
            if(size == 0){
            throw new RuntimeException("栈空间已空，出栈失败！");
            }

            Object obj = value[size - 1];
            value[--size] = null;
            return obj;
        }

    }

7. 常见存储结构：队列(queue、先进先出、first in first out、FIFO)
    class Queue{
        Object[] values;
        int size; // 记录存储的元素的个数

        public Queue(int length){
            values = new Object[length];
        }

        public void add(Object ele){
            if(size >= values.length){
                throw new RuntimeException("队列已满，添加失败！");
            }

            values[size++] = ele;
        }

        public Object get(){
            if(size <= 0){
                throw new RuntimeException("队列已空，获取失败！");
            }

            Object obj = values[0];
            for(int i = 0; i < size - 1; i++){
                value[i] = value[i + 1];
            }

            value[--size] = null;

            return obj;
            }
        }

    }
