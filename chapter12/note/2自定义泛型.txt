1.自定义泛型类 / 接口
    1.1 格式
        class A<Type>{

            }

        interface B<T1,T2>{

        }

    1.2 使用说明
        ①我们在声明完自定义泛型类以后，可以在类的内部（属性、方法、构造器等）使用类的泛型
        ②我们在创建自定义泛型类的对象时，可以指明泛型参数类型。一旦指明，内部凡是使用类的
          泛型参数的位置，都具体化为指定的类的泛型类型
        ③如果在创建自定义泛型类的对象时，没有指明泛型参数类型，那么泛型将被擦除，泛型对应
          的类型均按照Object处理，但不等价于Object
          > 经验：泛型要使用一路都用，要不用都不要用
        ④泛型的指定中必须使用引用数据类型。不能使用基本数据类型，此时只能使用包装类替换
        ⑤除创建泛型类对象外，子类继承泛型类时、实现类实现泛型接口时，也可以确定泛型结构中的
          泛型参数
        ⑥如果我们在给泛型类提供子类时，子类也不确定泛型的类型，则可以继续使用泛型参数
        ⑦我们还可以在现有的父类的泛型参数基础上，新增泛型参数

    1.3 注意点
        > 不可以在静态方法中使用类的泛型
        > 异常类不能使用泛型

2.自定义泛型方法
    2.1 格式
        权限修饰符 <T> 返回值类型 方法名(形参列表){ //通常在形参列表或返回值类型的位置会出现泛型参数T

        }

    2.2 举例
        public <E> E method(E e){

        }

    2.3说明
        > 声明泛型方法时，一定要添加泛型参数<T>
        > 泛型参数在方法调用时，指明具体的类型
        > 泛型方法可以根据需要声明为static
        > 泛型方法所属类是否是一个泛型类，都可以


记住一点：引用数据类型可以用不确定的泛型来表示，基本数据类型
        可以转化为包装类来使用泛型