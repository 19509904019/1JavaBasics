1. IO流的分类
    > 流向不同：输入流、输出流
    > 处理单位不同：字节流、字符流
    > 流的角色不同：节点流、处理流

2. 基础IO流的框架：
    抽象基类：              4个节点流(也成为文件流):
        InputStream               FileInputStream
        OutputStream              FileOutputStream
        Reader                    FileReader
        Writer                    FileWriter

3. FileReader / FileWriter 的使用
    3.1 执行步骤
        第一步：创建读取或写出的File类的对象
        第二步：创建输入流或输出流
        第三步：具体的读入或写出的过程
            读入：read(char[] cbuffer)
            写出：write(String str) / write(char[] cbuffer, 0, len)
        第四步：关闭流资源，避免内存泄露

    3.2 注意点
        ① 因为涉及到流资源的关闭操作，所以出现异常的话，需要使用try-catch-finally的方式来处理异常
        ② 对于输入流来讲，要求File类的对象对应的物理磁盘上的文件必须存在。否则，会报FileNotFoundException
           对于输出流来讲，File类的对象对应的物理磁盘上的文件可以不存在
            > 如果此文件不存在，则输出的过程中会自动创建此文件，并写出数据到此文件中
            > 如果此文件存在，使用FileWriter(File file)或FileWriter(File file, false)会对现有的文件进行覆盖
                使用FileWriter(File file, true)会在现有文件的末尾追加写出内容

4. FileInputStream 和 FileOutputStream
    4.1 执行步骤
        第一步：创建读取或写出的File类的对象
        第二步：创建输入流或输出流
        第三步：具体的读入或写出的过程
            读入：read(byte[] buffer)
            写出：write(byte[] buffer, 0, len)
        第四步：关闭流资源，避免内存泄露

    4.2 注意点
        在3.2注意点的基础之上，看其他的注意点
            > 对于字符流，只能用来操作文本文件，不能用来处理非文本文件
              对于字节流，通常是用来处理非文本文件的。但是。如果涉及到文本文件的复制操作，也可以使用字节流


