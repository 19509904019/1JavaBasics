一、异常的概述
    （1）什么是异常？
        指的是程序在执行过程中，出现的非正常情况，如果不处理最终会导致JVM的非正常停止

    （2）异常的抛出机制
        Java中把不同的异常用不同的类表示，一旦发生某种异常，就“创建该异常类型的对象”，并且抛出(throw)。
        然后程序员可以捕获(catch)到这个异常对象并处理，如果没有捕获(catch)这个异常对象，那么这个异常
        对象将会导致程序终止

    （3）如何对待异常
        对于程序出现的异常，一般有两种解决方法：一是遇到错误就终止程序的运行。另一种方法是程序员在编写程序时，
        就充分考虑到各种可能发生的异常和错误，极力预防和避免。实在无法避免的，要编写相应的代码进行异常的检测，
        以及“异常的处理”，保证代码的“健壮性”
二、异常的体系结构及常见的异常
java.lang.Throwable:异常体系的根父类
    |---java.lang.Error:错误。  Java虚拟机无法解决的严重问题。如：JVM系统内部错误、资源耗尽等严重情况

    |---java.lang.Exception:异常。  我们可以编写针对性的代码进行处理
        |---编译时异常：(受检异常)在执行javac.exe命令时，出现异常
            |----  ClassNotFoundException(找不到指定的类)
                Class clz = Class.forName("java.lang.String")

            |----  FileNotFoundException(找不到指定的文件)

            |----  IOException:
                public void test(){
                    File file = new File("hello.txt");

                    FileInputStream fis = new FileInputStream(file); //可能报FileNotFoundException异常

                    int data = fis.read();  // 可能报IOException
                    while(data != -1){
                        System.out.println((char)data);
                        data = fis.read();  // 可能报IOException
                    }

                    fis.close();
                }



        |---运行时异常：(非受检异常)在执行java.exe命令时，出现异常
            |----  ArrayIndexOutBoundsException (角标越界)
            |----  NullPointerException (空指针异常，指向的对象为空)
                int[][] arr = new int[10][];
                System.out.println(arr[0][0]);  //报错

            |----  ClassCastException(类型转换不兼容)
                Object obj = new String();
                Date date = (Date)obj;

            |----  NumberFormatException(数据格式异常)
                String str = "abc";
                int num = Integer.parseInt(str);

            |----  InputMismatchException(输入类型不匹配)
                Scanner scan = new Scanner(System.in);
                int num = scan.nextInt();
                System.out.println(num);  //输入abc等非数字的内容报错

            |----  ArithmeticException(算数异常)
                int num = 10;
                System.out.println(num / 0);

三.、异常处理的方式
方式一（抓抛模型）：try-catch-finally
    1.处理过程
    过程1：”抛“
        程序在执行的过程中，一旦出现异常，就会在出现异常的代码处生成对应异常类的对象，并将此
        对象抛出。一旦抛出，此程序就不执行其后的代码了

    过程2：”抓“
        针对于过程1中抛出的异常对象，进行捕获处理。此捕获处理的过程，就称为抓。一旦将异常进行
        了处理，代码就可以继续执行

    2.基本结构：
        try{
            // 可能产生异常的代码
        }
        catch(异常类型1 e){
            // 当产生异常类型1型异常时的处置措施
        }
        catch(异常类型2 e){
            // 当产生异常类型2型异常时的处置措施
        }
        finally{
            // 无论是否发生异常，都无条件执行的语句
        }

    3.使用细节：
        > 将可能出现异常的代码声明在try语句中，一旦代码出现异常，就会自动生成一个对应异常类的
          对象，并将此对象抛出

        > 针对于try中抛出的异常类的对象，使用之后的catch语句进行匹配。一旦匹配上，就进入
          catch语句块进行处理。一旦处理结束，代码就可以继续向下执行。

        > 如果声明了多个catch结构，并且不存在子父类关系的不同异常类型，谁声明在上面，谁声明在下面
          都可以。如果多个异常类型满足子父类的关系，则必须将子类声明在父类结构的上面，否则报错

        > catch中异常处理的方式：
            ①自己编写输出的语句
            ②printStackTrace():打印异常的详细信息 （推荐）
            ③getMessage():获取发生异常的原因

        > try中声明的变量，出了try结构之后，就不可以进行调用了

    4.开发体会
        > 对于运行时异常：
            开发中，通常就不进行显示的处理了，一旦在程序执行中，出现了运行时异常，则根据异常
            的提示信息修改代码即可

        > 编译时异常：
            一定要进行处理，否则编译时不通过

    5.finally的使用说明
        5.1 finally的理解
            > 我们将一定要执行的代码声明在finally结构中
            > 无论try中或catch中是否存在仍未被处理的异常，无论try中或catch中是否存在return
              语句，finally中的语句一定会被执行
            > finally语句和catch语句是可选的，但finally不能单独使用

        5.2 什么样的代码我们一定要声明在finally中呢？
            > 我们在开发中，有一些资源（比如：输入流、输出流，数据库连接，Socket连接等资源），
              在使用完以后，必须显式的进行关闭操作。否则，GC不会自动的回收这些资源，进而导致内存的泄露

              为了保证这些资源在使用完以后，不管是否出现了未被处理的异常情况下关闭这些资源，我们
              必须将这些操作声明在finally中


方式二：throws
    1. 格式：在方法的声明处，使用”throws 异常类型1，异常类型2....“

    2. public void test() throws 异常类型1,异常类型2...{
        // 可能存在编译时异常
    }

    3. 是否真正处理了异常？
        > 从编译是否能通过的角度看，看成是给出了异常万一要是出现时候的解决方案。
          此方案就是继续向上抛出(throws)
        > 但是此throws的方式，仅是将可能出现的异常抛给了此方法的调用者。此调用者
          仍然需要考虑如何处理相关异常。从这个角度来看，throws的方式不算真正意义
          上处理了异常。

    4. 方法重写的要求
        子类重写的方法抛出的异常类型可以与父类被重写的方法抛出的异常类型相同，或是父类被重写
        的方法抛出的异常类型的子类，但是子类重写的方法的方法体必然与父类被重写的方法体不同

    5. 开发中，如何选择异常处理的两种方式？
        > 如果代码中，涉及到资源的调用(流、数据库连接、网络连接等)，则必须考虑使用try-catch-finally
          来处理，保证不出现内存泄露
        > 如果父类被重写的方法没有throws异常类型，则子类重写的方法如果出现异常，只能考虑使用try-catch-finally
          进行处理，不能throws
        > 开发中，方法a中依次调用了方法b、c、d等方法，方法b、c、d之间是递进关系。此时，如果方法b、c、d
          中有异常，我们通常选择使用throws，而方法a中通常选择使用try-catch-finally

4. 手动抛出异常对象
    在方法内部，满足指定条件的情况下，使用“throw  异常类的对象”的方式抛出

5. 如何自定义异常类
    ①继承于现有的异常体系，通常继承于RuntimeException / Exception
    ②通常提供几个重载的构造器
    ③提供一个全局常量，声明为：static final long serialVersionUID;
