1. 线程间通信的理解
    当我们“需要多个线程”来共同完成一件任务，并且我们希望他们“有规律的执行”，那么多线程之间需要一些通信机制，
    可以协调他们的工作，以此实现多线程共同操作一份数据
    （即多个线程共同协作完成同一个任务）

2. 涉及到三个方法的使用：
    wait():线程一旦执行此方法，就进入等待状态。同时，会释放对同步监视器的调用
    notify():一旦执行此方法，就会唤醒被wait()的线程中优先级最高的那一个线程。如果被wait()
             的多个线程的优先级相同，则随机唤醒一个。被唤醒的线程从当初被wait的位置继续执行
    notifyAll():一旦执行此方法，就会唤醒所有被wait()的线程

3.注意点：
    >此三个方法的使用，必须是在同步代码块或同步方法中
        (Lock需要配合Condition实现线程间的通信)

    >此三个方法的调用者，必须是同步监视器。否则报错
    >此三个方法声明在Object中

4.wait() 和 sleep() 的区别？
    相同点：一旦执行，当前线程都会进入阻塞状态

    不同点：
        >声明的位置：
            wait():声明在Object类中
            sleep():声明在Thread类中，静态的

        >使用的场景不同：
            wait():只能使用在同步代码块或同步方法中
            sleep():可以在任何需要使用的场景

        >使用在同步代码块或同步方法中：
            wait():一旦执行，会释放同步监视器
            sleep():一旦执行，不会释放同步监视器

        >结束阻塞的方式：
            wait():①到达指定时间自动结束阻塞
                    ②通过notify唤醒结束阻塞
            sleep():到达指定时间自定结束阻塞

