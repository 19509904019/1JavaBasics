1. 线程的创建方式一：继承Thread类
     步骤：
        ①创建一个继承于Thread类的子类
        ②重写Thread类的run() --->  将此线程要执行的操作，声明在此方法体中
        ③创建当前Thread的子类的对象
        ④通过对象调用start(): 1.启动线程  2.调用当前线程的run()

2. 线程的创建方式二：实现Runnable接口
    步骤：
        ①创建一个实现Runnable接口的类
        ②实现接口中的run() ---> 将此线程要执行的操作，声明在此方法体中
        ③创建当前实现类的对象
        ④将此对象作为参数传递到Thread类的构造器中，创建Thread类的示例
        ⑤Thread类的实例调用start(): 1.启动线程 2.调用当前线程的run()

自我总结：
    ①第一种重写Thread里面的run()方法,此时没有使用Thread的构造器,执行的是重写的run()方法，
      当然在使用带参的构造器后，只要重写了Thread里面的run()方法，仍然调用的是被重写的run()方法
    ②第二种重写的是Runnable里面的run()方法，此时使用了Thread带参的构造器，当使用了带参的
      构造器后，Thread源码里调用的是Runnable里面的run()方法，但Runnable里面的run()方法
      被重写了，因此还是使用的是重写的run()方法


3. 对比两种方式？
    共同点：①启动线程使用的都是Thread类中定义的start()
           ②创建的线程对象，都是Thread类或其子类的实例

    不同点：一个是类的继承，一个是接口的实现
            建议：建议使用Runnable接口的方式
            Runnable方式的好处：①实现的方式，避免类的单继承的局限性
                              ②更适合处理有共享数据的问题
                              ③实现了代码和数据的分离

    联系：public class Thread implements Runnable (代理模式)