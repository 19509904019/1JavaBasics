1.几个概念
    程序(program):为完成特定任务，用某种语言编写的“一组指令的集合”，即一段静态的代码
    进程(process):程序的一次执行过程，或是正在内存中运行的运用程序，进程是动态的。进程作为操作系统
                 调度和分配资源的最小单位
    线程(thread):进程可进一步细化为线程，是程序内部的一条执行路径。线程作为CPU调度和执行的最小单位

2.如何创建多线程
    >继承Thread类，重写run()方法
    >实现Runnable接口，重写run()方法
    >实现Callable接口，重写call()方法（jdk5.0新增）
    >使用线程池（jdk5.0新增）

3.熟悉Thread类的常用方法、线程的生命周期
    (1)线程中的构造器
        -public Thread():分配一个新的线程对象
        -public Thread(String name):分配一个指定名字的新的线程对象，默认Thread-0...
        -public Thread(Runnable target):指定创建线程的目标对象，它实现了Runnable接口中的run()方法
        -public(Runnable target,String name):分配一个带有指定目标新的线程对象并指定名字

    (2)线程中的常用方法：
        >start():①启动线程 ②调用线程的run()方法
        >run():将线程要执行的操作，声明在run()中
        >currentThread():获取当前执行代码对应的线程
        >getName():获取线程名
        >setName():设置线程名
        >sleep(long millis):静态方法，调用时，可以使得当前线程睡眠指定的毫秒数(在哪个线程调用就阻塞哪个线程)
        >yield():静态方法，一旦执行此方法，就释放CPU的执行权
        >join():在线程a中通过线程b调用join(),意味着线程a进入阻塞状态，直到线程b执行结束，
                线程a才结束阻塞状态，继续执行（谁调用谁掌握执行权）
        >isAlive():判断当前线程是否存活

    (3)线程的优先级：
        getPriority():获取线程的优先级
        setPriority():设置线程的优先级

    (4)Thread类内部声明的三个常量：
        - MAX_PRIORITY(10): 最高优先级
        - MAX_PRIORITY(5): 普通优先级，默认情况下main线程具有普通优先级
        - MAX_PRIORITY(1): 最低优先级

生命周期：分为jdk5.0之前和jdk5.0之后

4.如何解决线程安全问题（重点、难点）
    (1)什么是线程安全问题？
        多个线程操作共享数据，就有可能出现安全问题

    (2)如何解决线程的安全问题？有几种方式？
        同步机制：①同步代码块  ②同步方法
        重点关注两个事：共享数据及操作共享数据的代码；同步监视器保证唯一性

        注意：在实现Runnable接口的方式中，同步监视器可以考虑使用this
             在继承Thread类的方式中，同步监视器慎用this，可以考虑使用"当前类.class"

             非静态的同步方法，默认同步监视器是this
             静态的同步方法，默认同步监视器是当前类本身

        jdk5.0新增:Lock接口及其实现类（保证多个线程共用同一个Lock的实例）

5.同步机制相关问题
    (1) 懒汉式的线程安全的写法
    (2) 同步机制会带来的问题：死锁
            需要解决死锁产生的条件及规避方式

6.线程的通信
(1) 在同步机制下，考虑线程间的通信
(2) wait()、notify()、notifyAll()都需要使用在同步代码块或同步方法中














