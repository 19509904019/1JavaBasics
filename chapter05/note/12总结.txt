1. 面向过程VS面向对象 (了解)

2.类、对象
    类：抽象的，概念上的定义
    对象：具体的，类的一个一个实例

    对象的内存解析
        创建类的一个对象；创建类的多个对象；方法的调用的内存解析

    Java中内存结构的划分
        Java中内存结构划分：虚拟机栈、堆、方法区； 程序计数器、本地方法栈
        虚拟机栈：以栈帧为基本单位，有入栈和出栈操作，每个方法对应一个栈帧；每个栈帧入栈操作对应一个方法的执行；
                方法内的局部变量会存储在栈帧中
        堆空间：new出来的结构(数组、对象)：①数组，数组的元素在堆中 ②对象的成员变量在堆中
        方法区：加载的类的模板结构

3.类的成员之一：属性（或成员变量）
     属性 vs 局部变量
        ① 属性写在类里面、局部变量写在方法里面
        ② 二者内存中存放的位置不同
        ③ 作用域不同，属性可以被整个类中的元素调用，局部变量只能给其声明的方法调用
        ④ 权限修饰符，属性可以有权限修饰符修饰，而局部变量则不可以修饰
        ⑤ 初始化值，局部变量需要在声明中初始化值，属性可以不用
        ⑥ 生命周期不同，属性随对象的创建而创建，随对象的消亡而消亡，局部变量随方法调用进行创建

4.类的成员之二：方法
    ① 方法的声明：权限修饰符  返回值类型 方法名(形参列表){
            // 方法体
    }
        重点：返回值类型、形参列表

    ② return关键字的使用
        返回值、作为方法的中断

    ③ 方法的重载
        方法重载的要求：两同一不同，即类名相同、方法名相同，参数列表不同
        调用方法时，如何确定调用的是某个指定的方法呢？
            1. 方法名
            2. 形参列表

    ④ 可变个数形参的方法
        格式：(int ... args)

    ⑤ 方法的参数传递机制：值传递（重点）
        >如果形参是基本数据类型的变量，则将实参保存的数据值赋给形参
        >如果形参是引用数据类型的变量，则将实参保存的地址值赋给形参

    ⑥ 递归方法
        递归方法构成了隐式的循环
        对比：相较于循环结构，递归方法效率稍低，内存占用偏高

5.对象数组
Sting[]; com.reflectexample.Person[]; ....

6.package、import关键字的使用
package: 指明声明的类所属的包
import: 当前类中，如果使用其他包下的类（除java.lang包），原则上就需要导入

7.oop(面向对象的程序设计)的特征之一：封装性
    Java规定了4种权限修饰，分别是：public、protected、缺省、private
    我们可以使用4种权限修饰来修饰类及类的内部成员。当这些成员被调用时，体现可见性的大小

    举例：
        场景1：私有化(private)类的属性，提供公共(public)的get和set方法，对此属性进行获取或修改
        场景2：将类中不需要对外暴露的方法设置为private
        场景3：单例模式中构造器private的了，避免在类的外部创建实例。（static关键字中说明）

    原则：高内聚、低耦合
    即该隐藏的隐藏，该暴露的暴露

8.类的成员之三：构造器
    如何定义：权限修饰符 类名(形参列表){}
    构造器的作用：①搭配new，用来创建对象  ②初始化对象的成员变量

9. 三个小知识点
    一、类中属性（当前仅考虑实例变量）赋值过程：

        1.在类的属性中，可以有哪些位置给属性赋值？
            ①默认初始化
            ②显式初始化
            ③构造器中初始化
            ④通过“对象.方法”的方式赋值
            ⑤通过“对象.属性”的方式赋值

        2.这些位置执行的先后顺序是怎样？
            ① --- ② --- ③ --- ④/⑤

        3.以上操作在对象创建过程中可以执行的次数如何？
            > 只能执行一次：①、 ②、 ③
            > 可以执行多次：④、 ⑤


    二、JavaBean的理解
        所谓JavaBean，是指符合如下标准的Java类：
            >类是公共的
            >有一个无参的公共的构造器
            >有属性，且有对应的get、set方法


    三、UML类图
        + 表示public类型  -表示private类型  #表示protected类型
        方法的写法： 方法的类型(+ -) 方法名(参数名：参数类型)：返回值类型
        （若方法有下划线表示为构造器）