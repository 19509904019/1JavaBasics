1.二维数组的理解
>对于二维数组的理解，可以看成是一维数组array1又作为另一个一维数组array2的元素而存在
>其实，从数组底层的运行机制来看，并没有多维数组

2. 二维数组的使用（6个基本点）
> 数组的声明和初始化
方式1：静态初始化：数组变量的赋值和数组元素的赋值同时进行
int[][] arr = new int[][]{{},{},{}};

方式2：动态初始化
String[][] arr = new String[3][4];
或
String[][] arr = new String[3][];

其他方式：
String[][] arr = {{},{},{}};  //类型推断

> 调用数组的指定元素
int[][] arr = new int[][]{{1,2,3},{4,5,6},{7,8}};
arr[0][0] = 1
arr[1][2] = 6
arr[i] ---> 打印的是行地址值

> 数组的属性：length,表示数组的长度
arr.length ---> 打印的是行数
arr[i].length ---> 每行的列数

> 数组的遍历
for(int i = 0; i < arr.length; i++){
    for(int j = 0; j < arr[i].length; j++){
        System.out.print(arr[i][j]);
        }
        System.out.println();
    }

> 数组元素的默认初始化值
1.动态初始化方式1(int[][] arr = new int[3][4])
外层元素：默认存储地址值
内层元素：默认与一维数组元素的不同类型的默认值规定相同

2.动态初始化方式2(int[][] arr = new int[3][])
外层元素：默认存储null
内层元素：不存在，如果调用会报错(NullPointerException)

> 二维数组的内存解析（难）